#pragma once
#include "../../board/types/piece.h"
#include "../types.h"
constexpr Score PIECE_VALUES[] = {
        S(109, 129),    S(486, 411),    S(499, 415),    S(721, 835),    S(1612, 1540),  S(0, 0),        
};
constexpr Score OPEN_FILE_BONUS[] = {
        S(0, 0),        S(0, 0),        S(0, 0),        S(46, -7),      S(-7, 17),      S(-60, 5),      
};
constexpr Score SEMI_OPEN_FILE_BONUS[] = {
        S(0, 0),        S(0, 0),        S(0, 0),        S(15, 9),       S(1, 10),       S(-21, 16),     
};
constexpr Score PAWN_PROTECTION[] = {
        S(8, 4),        S(1, 23),       S(2, 18),       S(0, 0),        S(0, 0),        S(0, 0),        
};
constexpr Score ATTACKED_BY_PAWN[] = {
        S(0, 0),        S(-87, -47),    S(-81, -72),    S(39, -36),     S(-90, -4),     S(0, 0),        
};
constexpr Score THREATS[] = {
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
        S(0, 0),        S(0, 0),        S(38, 49),      S(70, 30),      S(56, 2),       S(0, 0),
        S(0, 0),        S(30, 49),      S(0, 0),        S(56, 39),      S(59, 27),      S(0, 0),
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(74, 18),      S(0, 0),
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
};
constexpr Score CHECK_BONUS[] = {
        S(226, 5),      S(142, 27),     S(85, 67),      S(140, 8),      S(71, 112),     S(0, 0),        
};
constexpr Score CENTER_CONTROL[] = {
        S(0, 0),        S(-4, -2),      S(3, 12),       S(1, 0),        S(-1, 11),      S(0, 0),        
};
constexpr Score KING_PAWN_SHIELD[] = {
        S(44, -23),     S(36, -18),     
};
constexpr Score KNIGHT_MOBILITY[] = {
        S(2, -37),      S(18, 9),       S(23, 19),      S(22, 30),      S(25, 32),      S(23, 40),      S(25, 37),      S(24, 30),
        S(35, 10),      
};
constexpr Score BISHOP_MOBILITY[] = {
        S(-13, -44),    S(2, -19),      S(11, 3),       S(16, 16),      S(21, 25),      S(27, 32),      S(27, 39),      S(24, 41),
        S(31, 43),      S(30, 39),      S(39, 36),      S(58, 27),      S(41, 46),      S(62, 9),       
};
constexpr Score ROOK_MOBILITY[] = {
        S(-22, -100),   S(-9, -52),     S(-7, -27),     S(2, -11),      S(5, 8),        S(-2, 30),      S(4, 33),       S(11, 34),
        S(13, 42),      S(18, 46),      S(18, 52),      S(27, 55),      S(32, 55),      S(32, 50),      S(77, 31),      
};
constexpr Score QUEEN_MOBILITY[] = {
        S(-126, 151),   S(-1, -472),    S(-23, -127),   S(-17, -132),   S(-21, -21),    S(-16, -1),     S(-16, 21),     S(-14, 37),
        S(-16, 59),     S(-11, 55),     S(-9, 66),      S(-13, 79),     S(-8, 77),      S(-5, 77),      S(-0, 73),      S(-3, 81),
        S(-4, 73),      S(4, 65),       S(-0, 69),      S(11, 58),      S(40, 24),      S(33, 35),      S(7, 39),       S(90, 6),
        S(17, 12),      S(50, 1),       S(222, -109),   S(365, -181),   
};
constexpr Score KNIGHT_FORWARD_MOBILITY[] = {
        S(-7, -4),      S(2, 14),       S(12, 20),      S(23, 25),      S(39, 23),      S(0, 0),        S(0, 0),        S(0, 0),
        S(0, 0),        
};
constexpr Score BISHOP_FORWARD_MOBILITY[] = {
        S(7, 4),        S(9, 13),       S(13, 11),      S(16, 16),      S(20, 15),      S(17, 16),      S(20, 13),      S(26, 25),
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        
};
constexpr Score ROOK_FORWARD_MOBILITY[] = {
        S(1, 9),        S(4, 6),        S(4, 14),       S(10, 16),      S(12, 22),      S(9, 24),       S(10, 31),      S(9, 48),
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        
};
constexpr Score QUEEN_FORWARD_MOBILITY[] = {
        S(6, -14),      S(15, -4),      S(13, 7),       S(18, -8),      S(17, 5),       S(18, 1),       S(18, 12),      S(21, 16),
        S(18, 20),      S(14, 37),      S(22, 44),      S(8, 69),       S(-12, 100),    S(1, 149),      S(-18, 150),    S(0, 0),
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        
};
constexpr Score KING_RING_ATTACK_PAWN[] = {
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(12, -58),     S(-32, 4),      S(-14, 7),      S(21, -11),
        S(30, -10),     S(9, -11),      S(12, -4),      S(29, -17),     S(18, -15),     S(23, -11),     S(21, -10),     S(39, -14),
        S(45, -18),     S(34, -12),     S(30, -12),     S(35, -13),     S(26, -14),     S(49, -20),     S(31, -18),     S(34, -27),
        S(46, -28),     S(7, -25),      S(46, -32),     S(-18, -24),    
};
constexpr Score KING_RING_ATTACK_KNIGHT[] = {
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(39, 0),       S(3, 38),       S(14, 34),      S(6, 43),
        S(5, 48),       S(14, 32),      S(24, 20),      S(29, 10),      S(41, 3),       S(33, 6),       S(33, -3),      S(50, -15),
        S(52, -11),     S(60, -14),     S(52, -13),     S(55, -17),     S(49, -18),     S(80, -32),     S(86, -32),     S(35, -33),
        S(6, -28),      S(-87, -27),    S(-75, -31),    S(90, -62),     
};
constexpr Score KING_RING_ATTACK_BISHOP[] = {
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(-15, 17),     S(6, 29),       S(9, 20),       S(17, 12),
        S(18, 4),       S(17, 14),      S(24, 11),      S(22, 5),       S(23, -5),      S(32, -7),      S(47, -7),      S(50, -11),
        S(35, -9),      S(54, -13),     S(45, -12),     S(40, -13),     S(68, -21),     S(29, -9),      S(42, -12),     S(-8, -7),
        S(-33, -4),     S(-32, -24),    S(17, -23),     S(-3, -43),     
};
constexpr Score KING_RING_ATTACK_ROOK[] = {
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(-91, 100),    S(53, -33),     S(50, -18),     S(38, -29),
        S(25, -7),      S(37, -15),     S(37, -17),     S(32, -13),     S(40, -13),     S(41, -13),     S(32, -8),      S(45, -14),
        S(41, -12),     S(45, -11),     S(51, -14),     S(46, -12),     S(57, -14),     S(41, -12),     S(30, -10),     S(45, -17),
        S(26, -15),     S(82, -29),     S(96, -24),     S(51, -30),     
};
constexpr Score KING_RING_ATTACK_QUEEN[] = {
        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(17, -65),     S(23, -28),     S(23, -15),     S(23, -19),
        S(30, -28),     S(26, -6),      S(40, -17),     S(40, -2),      S(38, 10),      S(59, -12),     S(66, -10),     S(74, -16),
        S(79, -13),     S(90, -14),     S(106, -31),    S(143, -51),    S(149, -58),    S(147, -56),    S(196, -83),    S(170, -71),
        S(140, -52),    S(174, -84),    S(374, -179),   S(187, -94),    
};
constexpr Score KING_LINE_SAFETY[] = {
        S(0, 0),        S(0, 0),        S(50, -23),     S(37, 24),      S(29, 25),      S(22, 17),      S(22, 17),      S(21, 18),
        S(11, 17),      S(5, 24),       S(8, 14),       S(3, 16),       S(0, 12),       S(7, 8),        S(-21, 18),     S(-11, 11),
        S(-2, 5),       S(-11, -1),     S(-28, -2),     S(-27, -10),    S(-54, -14),    S(-109, -24),   S(-165, -25),   S(-191, -48),
        S(-145, -69),   S(-129, -108),  S(0, 0),        S(0, 0),        
};
constexpr Score PHALANX_PAWN[] = {
        S(0, 0),        S(3, -6),       S(20, 5),       S(32, 28),      S(56, 84),      S(74, 141),     S(-32, 496),    S(0, 0),
};
constexpr Score CANDIDATE_PASSED_PAWN[] = {
        S(0, 0),        S(-7, -4),      S(3, -3),       S(12, 11),      S(21, 20),      S(33, 69),      S(0, 0),        S(0, 0),
};
constexpr Score ISOLATED_PAWN_PENALTY = S(-13, -14);
constexpr Score DOUBLED_PAWN_PENALTY = S(-19, -26);
constexpr Score BISHOP_PAIR_BONUS = S(29, 82);
constexpr Score PAWNLESS_KING_FLANK = S(-37, -17);
constexpr Score TEMPO = S(28, 27);

