#pragma once

#include "../../board/types/piece.h"
#include "../types.h"

constexpr Score PAWN_TABLE[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(125, 157),    S(123, 153),    S(79, 150),     S(115, 123),    S(74, 133),     S(99, 144),     S(44, 172),     S(39, 182),
		S(0, 47),       S(10, 40),      S(39, 39),      S(59, 5),       S(73, 18),      S(90, 22),      S(41, 36),      S(16, 50),
		S(-5, 20),      S(0, 8),        S(1, 10),       S(25, -18),     S(25, -3),      S(43, 2),       S(6, 11),       S(-6, 23),
		S(-12, 9),      S(-19, 7),      S(-2, -6),      S(8, -12),      S(12, -5),      S(23, -10),     S(2, -4),       S(-5, -2),
		S(-19, 4),      S(-20, 8),      S(-9, 10),      S(-5, 6),       S(3, 22),       S(-11, 21),     S(-9, 6),       S(-26, 5),
		S(-11, 16),     S(-3, 15),      S(-8, 31),      S(-6, 16),      S(-1, 41),      S(6, 38),       S(12, 16),      S(-32, 6),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score KNIGHT_TABLE[] = {
		S(-216, -0),    S(-121, 37),    S(-75, 77),     S(5, 45),       S(114, 36),     S(-144, 69),    S(-37, 4),      S(-136, -44),
		S(-22, 15),     S(-28, 40),     S(43, 27),      S(30, 60),      S(37, 43),      S(71, 11),      S(-9, 29),      S(6, 3),
		S(-39, 16),     S(22, 29),      S(42, 72),      S(75, 68),      S(85, 51),      S(114, 52),     S(65, 16),      S(57, -10),
		S(26, 22),      S(47, 44),      S(60, 69),      S(96, 70),      S(70, 73),      S(87, 72),      S(49, 50),      S(61, 28),
		S(14, 30),      S(34, 29),      S(55, 68),      S(80, 71),      S(85, 63),      S(70, 66),      S(90, 37),      S(32, 35),
		S(1, -21),      S(21, 22),      S(41, 37),      S(50, 59),      S(60, 49),      S(50, 26),      S(48, 8),       S(13, 25),
		S(-25, -13),    S(-16, 13),     S(12, 3),       S(33, 31),      S(28, 41),      S(25, 2),       S(6, 12),       S(18, -12),
		S(-124, 4),     S(-8, -16),     S(-29, 8),      S(-5, 19),      S(10, 7),       S(1, 14),       S(-7, 8),       S(-44, -34)
};
constexpr Score BISHOP_TABLE[] = {
		S(-35, 31),     S(7, 41),       S(-102, 71),    S(-63, 76),     S(-54, 79),     S(-81, 60),     S(0, 46),       S(44, 17),
		S(-15, 43),     S(13, 34),      S(13, 46),      S(-12, 41),     S(6, 47),       S(51, 36),      S(-7, 38),      S(-18, 34),
		S(26, 44),      S(38, 36),      S(67, 38),      S(34, 39),      S(60, 31),      S(69, 55),      S(74, 38),      S(36, 52),
		S(3, 53),       S(36, 41),      S(26, 51),      S(77, 31),      S(51, 34),      S(53, 39),      S(33, 48),      S(27, 62),
		S(14, 44),      S(24, 32),      S(39, 46),      S(50, 32),      S(60, 22),      S(27, 43),      S(28, 23),      S(39, 34),
		S(19, 26),      S(37, 30),      S(41, 40),      S(35, 40),      S(32, 49),      S(44, 31),      S(42, 17),      S(40, 17),
		S(36, 11),      S(42, 2),       S(43, 17),      S(25, 27),      S(31, 26),      S(24, 10),      S(56, 22),      S(34, -4),
		S(44, -15),     S(27, 17),      S(16, 58),      S(16, 45),      S(6, 39),       S(9, 48),       S(6, 29),       S(22, -16)
};
constexpr Score ROOK_TABLE[] = {
		S(43, 65),      S(44, 68),      S(6, 73),       S(13, 74),      S(63, 57),      S(57, 54),      S(37, 61),      S(110, 49),
		S(23, 74),      S(17, 79),      S(47, 71),      S(63, 69),      S(65, 61),      S(104, 38),     S(48, 60),      S(61, 58),
		S(-9, 67),      S(27, 58),      S(43, 53),      S(55, 48),      S(62, 42),      S(111, 39),     S(137, 24),     S(63, 35),
		S(-7, 58),      S(4, 53),       S(29, 55),      S(43, 43),      S(38, 47),      S(56, 40),      S(29, 42),      S(13, 50),
		S(-26, 51),     S(-21, 53),     S(-8, 47),      S(6, 44),       S(4, 42),       S(20, 30),      S(25, 31),      S(8, 28),
		S(-32, 28),     S(-16, 32),     S(-13, 29),     S(-7, 28),      S(-2, 28),      S(18, 13),      S(28, 19),      S(0, 10),
		S(-44, 29),     S(-12, 21),     S(-21, 30),     S(-12, 25),     S(-5, 24),      S(1, 14),       S(3, 12),       S(-70, 31),
		S(-16, 33),     S(-17, 31),     S(-10, 27),     S(1, 15),       S(-2, 17),      S(4, 24),       S(-8, 23),      S(-4, 9)
};
constexpr Score QUEEN_TABLE[] = {
		S(-19, 55),     S(-31, 124),    S(5, 83),       S(40, 59),      S(84, 71),      S(97, 63),      S(88, 81),      S(55, 82),
		S(-6, 53),      S(-45, 106),    S(-16, 85),     S(-24, 98),     S(-27, 117),    S(58, 85),      S(19, 115),     S(51, 76),
		S(-10, 16),     S(-6, 26),      S(18, 5),       S(-6, 53),      S(4, 65),       S(90, 32),      S(110, 19),     S(16, 89),
		S(-8, 16),      S(-1, 28),      S(-14, 32),     S(-4, 15),      S(10, 31),      S(29, 50),      S(42, 65),      S(21, 98),
		S(-0, 12),      S(7, 27),       S(11, 1),       S(8, 11),       S(17, -3),      S(29, 18),      S(44, 15),      S(28, 24),
		S(-7, -22),     S(29, -65),     S(19, -17),     S(13, -26),     S(17, -21),     S(25, -16),     S(46, -39),     S(18, -10),
		S(-13, -13),    S(18, -45),     S(29, -85),     S(15, -26),     S(19, -35),     S(31, -97),     S(25, -71),     S(-13, -18),
		S(12, -46),     S(-16, -22),    S(1, -38),      S(4, 38),       S(-3, -22),     S(-7, -56),     S(20, -58),     S(-11, -74)
};
constexpr Score KING_TABLE[] = {
		S(-67, -121),   S(212, -90),    S(205, -68),    S(117, -61),    S(-170, -6),    S(-107, 21),    S(66, -23),     S(-13, -55),
		S(167, -70),    S(158, 7),      S(135, 13),     S(155, 3),      S(107, 16),     S(110, 30),     S(11, 42),      S(-150, 8),
		S(44, 2),       S(132, 25),     S(162, 37),     S(71, 46),      S(150, 35),     S(169, 57),     S(200, 34),     S(-41, 7),
		S(-21, -3),     S(37, 36),      S(83, 51),      S(60, 78),      S(22, 78),      S(76, 50),      S(49, 33),      S(-102, 8),
		S(-70, -22),    S(103, -11),    S(51, 38),      S(-1, 67),      S(21, 64),      S(15, 40),      S(11, 13),      S(-83, -14),
		S(-62, -24),    S(-6, 2),       S(-5, 24),      S(-6, 39),      S(3, 37),       S(2, 21),       S(-6, 3),       S(-46, -27),
		S(-51, -25),    S(-55, -2),     S(-20, 7),      S(-82, 25),     S(-44, 19),     S(-50, 14),     S(-51, 1),      S(-50, -32),
		S(-89, -89),    S(-41, -54),    S(-83, -13),    S(-95, -17),    S(-103, -20),   S(-74, -24),    S(-48, -42),    S(-59, -89)
};
constexpr Score PASSED_PAWN_BONUS[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(125, 157),    S(123, 153),    S(79, 150),     S(115, 123),    S(74, 133),     S(99, 144),     S(44, 172),     S(39, 182),
		S(79, 195),     S(52, 196),     S(53, 158),     S(25, 159),     S(14, 134),     S(17, 153),     S(-22, 184),    S(20, 180),
		S(35, 114),     S(34, 105),     S(29, 89),      S(13, 89),      S(16, 73),      S(17, 79),      S(-8, 109),     S(9, 92),
		S(17, 63),      S(-6, 67),      S(-13, 63),     S(-2, 58),      S(-9, 55),      S(-39, 61),     S(-6, 74),      S(-6, 63),
		S(6, 24),       S(-14, 35),     S(-7, 22),      S(-24, 28),     S(-8, 16),      S(6, 9),        S(22, 30),      S(27, 21),
		S(-5, 18),      S(4, 20),       S(1, 5),        S(7, 9),        S(-5, 8),       S(2, -3),       S(19, 12),      S(-5, 25),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score BLOCKED_PASSED_PAWN_PENALTY[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(-8, -143),    S(66, -199),    S(69, -183),    S(78, -213),    S(94, -192),    S(122, -275),   S(13, -277),    S(-12, -249),
		S(2, -115),     S(40, -145),    S(20, -140),    S(22, -120),    S(11, -103),    S(68, -143),    S(34, -174),    S(-62, -154),
		S(27, -72),     S(6, -75),      S(10, -65),     S(5, -56),      S(-7, -45),     S(-8, -65),     S(24, -74),     S(12, -97),
		S(18, -21),     S(16, -40),     S(-18, -33),    S(-1, -28),     S(-27, -25),    S(27, -47),     S(-104, -35),   S(10, -35),
		S(3, -8),       S(9, -3),       S(-34, -10),    S(-1, -38),     S(-36, -13),    S(-38, -2),     S(-35, 27),     S(-81, -3),
		S(3, -18),      S(-2, -32),     S(-16, -9),     S(15, -67),     S(32, -122),    S(42, -25),     S(-104, 2),     S(14, -30),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};

// pretty ignore
template<Color color, PieceType piece_type>
constexpr Score read_psqt(Square square) {
	if constexpr (color == WHITE) square = flip(square);
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
// pretty stop-ignore
