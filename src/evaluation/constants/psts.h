#pragma once
#include "move_generation/types.h"
#include "evaluation/types.h"
constexpr Score PAWN_TABLE[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(112, 156),    S(83, 161),     S(61, 153),     S(90, 129),     S(52, 137),     S(88, 145),     S(11, 177),     S(32, 177),
		S(2, 43),       S(7, 33),       S(33, 34),      S(59, -8),      S(46, 40),      S(84, 21),      S(37, 36),      S(14, 47),
		S(-2, 20),      S(-1, 9),       S(7, 11),       S(27, -15),     S(25, 4),       S(40, 5),       S(3, 14),       S(-5, 24),
		S(-12, 13),     S(-17, 12),     S(3, 1),        S(15, 1),       S(17, 6),       S(22, -3),      S(1, 2),        S(-8, 2),
		S(-18, 4),      S(-20, 7),      S(-4, 10),      S(2, 7),        S(9, 24),       S(-9, 21),      S(-10, 7),      S(-26, 5),
		S(-10, 14),     S(-5, 11),      S(-7, 27),      S(3, 8),        S(5, 35),       S(9, 32),       S(10, 11),      S(-35, 3),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score KNIGHT_TABLE[] = {
		S(-215, -15),   S(-132, 14),    S(-91, 47),     S(-11, 16),     S(92, 7),       S(-151, 40),    S(-47, -21),    S(-134, -62),
		S(-26, 15),     S(-38, 35),     S(35, 23),      S(20, 54),      S(30, 38),      S(58, 8),       S(-14, 23),     S(1, 2),
		S(-38, 18),     S(24, 29),      S(47, 68),      S(79, 64),      S(87, 48),      S(115, 48),     S(57, 19),      S(57, -8),
		S(27, 24),      S(45, 45),      S(57, 67),      S(89, 70),      S(61, 74),      S(82, 72),      S(42, 52),      S(58, 30),
		S(11, 32),      S(28, 27),      S(49, 65),      S(68, 68),      S(76, 62),      S(61, 64),      S(84, 36),      S(28, 36),
		S(-5, -21),     S(17, 18),      S(35, 31),      S(47, 55),      S(59, 43),      S(47, 23),      S(43, 5),       S(12, 25),
		S(-23, -6),     S(-11, 18),     S(15, 4),       S(36, 32),      S(35, 42),      S(35, 2),       S(16, 17),      S(22, -8),
		S(-112, 17),    S(2, -2),       S(-12, 16),     S(6, 29),       S(22, 16),      S(16, 23),      S(3, 17),       S(-38, -22)
};
constexpr Score BISHOP_TABLE[] = {
		S(-40, 15),     S(-2, 26),      S(-99, 54),     S(-73, 62),     S(-64, 64),     S(-86, 44),     S(-8, 30),      S(32, 2),
		S(-23, 41),     S(6, 29),       S(5, 42),       S(-18, 37),     S(-0, 41),      S(39, 32),      S(-15, 33),     S(-22, 30),
		S(22, 38),      S(34, 36),      S(64, 37),      S(31, 38),      S(55, 30),      S(65, 53),      S(67, 38),      S(30, 47),
		S(1, 51),       S(29, 41),      S(21, 49),      S(69, 30),      S(46, 32),      S(47, 39),      S(25, 48),      S(21, 61),
		S(10, 42),      S(21, 30),      S(33, 44),      S(44, 34),      S(54, 23),      S(22, 42),      S(24, 23),      S(37, 32),
		S(16, 24),      S(33, 27),      S(37, 39),      S(31, 39),      S(31, 48),      S(42, 32),      S(40, 17),      S(40, 16),
		S(38, 7),       S(41, 2),       S(43, 18),      S(29, 26),      S(34, 26),      S(32, 11),      S(60, 24),      S(38, -7),
		S(45, -13),     S(34, 17),      S(20, 58),      S(23, 43),      S(15, 37),      S(14, 47),      S(13, 29),      S(25, -14)
};
constexpr Score ROOK_TABLE[] = {
		S(34, 59),      S(32, 62),      S(-10, 66),     S(-5, 67),      S(45, 51),      S(46, 48),      S(33, 55),      S(98, 46),
		S(20, 61),      S(13, 66),      S(37, 57),      S(52, 55),      S(54, 48),      S(92, 28),      S(45, 48),      S(60, 44),
		S(-8, 57),      S(28, 47),      S(39, 44),      S(49, 40),      S(61, 32),      S(108, 30),     S(141, 13),     S(67, 25),
		S(-4, 53),      S(7, 48),       S(28, 50),      S(42, 40),      S(34, 44),      S(54, 38),      S(31, 38),      S(14, 45),
		S(-27, 51),     S(-17, 53),     S(-10, 47),     S(4, 45),       S(4, 42),       S(16, 32),      S(27, 31),      S(5, 29),
		S(-33, 29),     S(-14, 32),     S(-13, 30),     S(-7, 29),      S(-2, 29),      S(16, 16),      S(31, 20),      S(-0, 11),
		S(-43, 31),     S(-10, 24),     S(-20, 31),     S(-8, 26),      S(-3, 25),      S(11, 14),      S(12, 12),      S(-66, 33),
		S(-15, 38),     S(-14, 35),     S(-9, 30),      S(2, 18),       S(1, 19),       S(5, 25),       S(-3, 25),      S(-2, 13)
};
constexpr Score QUEEN_TABLE[] = {
		S(-19, 16),     S(-35, 85),     S(1, 42),       S(35, 16),      S(76, 31),      S(87, 27),      S(87, 41),      S(52, 44),
		S(-8, 52),      S(-44, 83),     S(-14, 57),     S(-21, 67),     S(-24, 85),     S(54, 58),      S(16, 94),      S(47, 75),
		S(-8, 15),      S(-4, 20),      S(16, 4),       S(-7, 50),      S(2, 59),       S(91, 24),      S(107, 14),     S(17, 83),
		S(-6, 20),      S(-3, 32),      S(-13, 29),     S(-4, 13),      S(8, 29),       S(29, 44),      S(40, 67),      S(19, 101),
		S(-2, 19),      S(7, 28),       S(10, 1),       S(5, 13),       S(16, -2),      S(28, 22),      S(43, 20),      S(26, 31),
		S(-8, -9),      S(27, -57),     S(19, -13),     S(11, -22),     S(19, -18),     S(24, -6),      S(47, -30),     S(18, -2),
		S(-14, 1),      S(15, -30),     S(28, -74),     S(18, -21),     S(22, -28),     S(37, -81),     S(29, -55),     S(-11, -3),
		S(10, -25),     S(-17, -4),     S(-1, -19),     S(5, 49),       S(-1, -10),     S(-7, -43),     S(17, -37),     S(-13, -51)
};
constexpr Score KING_TABLE[] = {
		S(-78, -109),   S(207, -84),    S(185, -62),    S(100, -54),    S(-190, 3),     S(-93, 22),     S(67, -17),     S(-26, -40),
		S(168, -63),    S(135, 8),      S(104, 11),     S(122, 0),      S(77, 12),      S(78, 27),      S(-0, 41),      S(-155, 16),
		S(44, 6),       S(111, 22),     S(115, 26),     S(32, 25),      S(97, 15),      S(125, 44),     S(175, 31),     S(-41, 12),
		S(-23, 0),      S(16, 33),      S(39, 38),      S(27, 45),      S(-13, 45),     S(36, 37),      S(23, 32),      S(-103, 12),
		S(-75, -17),    S(85, -13),     S(19, 26),      S(-32, 49),     S(-9, 45),      S(-15, 28),     S(-8, 12),      S(-81, -9),
		S(-55, -20),    S(-14, 1),      S(-20, 19),     S(-26, 34),     S(-14, 32),     S(-14, 16),     S(-12, 1),      S(-34, -23),
		S(-31, -23),    S(-46, -2),     S(-16, 8),      S(-76, 24),     S(-40, 18),     S(-41, 14),     S(-42, 1),      S(-30, -30),
		S(-57, -85),    S(-12, -48),    S(-58, -10),    S(-70, -10),    S(-81, -15),    S(-44, -19),    S(-21, -36),    S(-27, -87)
};
constexpr Score PASSED_PAWN_BONUS[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(112, 156),    S(83, 161),     S(61, 153),     S(90, 129),     S(52, 137),     S(88, 145),     S(11, 177),     S(32, 177),
		S(68, 192),     S(38, 197),     S(46, 159),     S(16, 169),     S(29, 106),     S(-1, 150),     S(-16, 173),    S(16, 173),
		S(25, 110),     S(20, 103),     S(12, 87),      S(4, 85),       S(2, 69),       S(18, 71),      S(-9, 100),     S(4, 87),
		S(12, 58),      S(-8, 59),      S(-20, 55),     S(-14, 47),     S(-16, 45),     S(-34, 54),     S(-12, 67),     S(-5, 57),
		S(3, 22),       S(-13, 34),     S(-10, 22),     S(-30, 27),     S(-11, 15),     S(1, 11),       S(22, 30),      S(24, 20),
		S(-7, 18),      S(5, 22),       S(-2, 8),       S(0, 16),       S(-9, 13),      S(5, 0),        S(20, 14),      S(-6, 26),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score BLOCKED_PASSED_PAWN_PENALTY[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(-11, -132),   S(75, -182),    S(67, -167),    S(98, -213),    S(107, -189),   S(111, -269),   S(28, -268),    S(-9, -236),
		S(12, -111),    S(47, -141),    S(13, -130),    S(21, -116),    S(23, -98),     S(78, -140),    S(6, -160),     S(-56, -147),
		S(28, -68),     S(6, -71),      S(10, -64),     S(0, -51),      S(-4, -46),     S(-20, -61),    S(36, -75),     S(9, -91),
		S(17, -19),     S(16, -38),     S(-16, -32),    S(3, -31),      S(-20, -29),    S(21, -47),     S(-99, -33),    S(5, -32),
		S(5, -5),       S(2, 2),        S(-37, -9),     S(7, -40),      S(-32, -16),    S(-28, -4),     S(-36, 24),     S(-72, -1),
		S(9, -20),      S(-9, -26),     S(-6, -7),      S(14, -60),     S(28, -107),    S(42, -22),     S(-98, 10),     S(14, -24),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};

// pretty ignore
template<Color color, PieceType piece_type>
constexpr Score read_psqt(Square square) {
	if (color == WHITE) square = ~square;
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
// pretty stop-ignore
