#pragma once
#include "move_generation/types.h"
#include "evaluation/types.h"
constexpr Score PAWN_TABLE[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(106, 161),    S(75, 163),     S(49, 160),     S(74, 139),     S(35, 146),     S(62, 150),     S(-8, 183),     S(35, 179),
		S(-11, 50),     S(-5, 36),      S(20, 38),      S(52, -1),      S(61, 56),      S(95, 14),      S(30, 32),      S(19, 44),
		S(-8, 21),      S(0, 14),       S(7, 15),       S(34, -13),     S(27, 6),       S(40, 12),      S(6, 17),       S(-4, 24),
		S(-13, 14),     S(-12, 14),     S(10, 3),       S(25, -1),      S(23, 5),       S(25, -1),      S(2, 5),        S(-9, 5),
		S(-13, 2),      S(-17, 8),      S(1, 7),        S(9, 8),        S(12, 22),      S(-5, 20),      S(-8, 5),       S(-24, 4),
		S(-12, 12),     S(-7, 9),       S(-9, 26),      S(3, 14),       S(1, 36),       S(10, 30),      S(6, 9),        S(-33, 2),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score KNIGHT_TABLE[] = {
		S(-204, -17),   S(-141, 16),    S(-71, 40),     S(-10, 15),     S(94, 7),       S(-145, 29),    S(-48, -21),    S(-124, -71),
		S(-16, 12),     S(-26, 31),     S(75, 16),      S(39, 48),      S(22, 42),      S(90, 3),       S(-18, 26),     S(1, -2),
		S(-20, 12),     S(54, 22),      S(56, 63),      S(85, 62),      S(110, 39),     S(124, 41),     S(76, 15),      S(52, -10),
		S(33, 24),      S(42, 42),      S(51, 70),      S(83, 69),      S(49, 77),      S(80, 71),      S(41, 50),      S(57, 24),
		S(14, 29),      S(22, 33),      S(44, 62),      S(53, 69),      S(62, 65),      S(53, 63),      S(78, 36),      S(26, 37),
		S(-11, -2),     S(13, 24),      S(29, 26),      S(35, 56),      S(54, 39),      S(42, 17),      S(39, 1),       S(3, 23),
		S(-19, -13),    S(-5, 9),       S(15, 14),      S(33, 30),      S(34, 37),      S(34, 5),       S(15, 24),      S(31, -18),
		S(-99, 2),      S(7, -7),       S(-14, 14),     S(5, 30),       S(30, 10),      S(17, 17),      S(7, 6),        S(-24, -35)
};
constexpr Score BISHOP_TABLE[] = {
		S(-30, 26),     S(4, 27),       S(-106, 49),    S(-66, 42),     S(-62, 49),     S(-97, 39),     S(-6, 26),      S(16, 16),
		S(-26, 42),     S(41, 25),      S(14, 40),      S(-23, 40),     S(37, 35),      S(53, 28),      S(25, 30),      S(-31, 37),
		S(19, 30),      S(38, 30),      S(70, 27),      S(38, 33),      S(61, 27),      S(77, 39),      S(80, 33),      S(31, 39),
		S(-2, 35),      S(37, 37),      S(23, 47),      S(83, 40),      S(60, 40),      S(62, 36),      S(42, 48),      S(14, 47),
		S(11, 28),      S(21, 36),      S(32, 46),      S(63, 46),      S(69, 37),      S(24, 41),      S(21, 27),      S(49, 13),
		S(23, 19),      S(36, 35),      S(34, 37),      S(32, 39),      S(30, 50),      S(42, 33),      S(33, 24),      S(42, 14),
		S(38, 11),      S(43, 8),       S(39, 20),      S(22, 33),      S(30, 29),      S(31, 12),      S(61, 29),      S(27, 1),
		S(45, 3),       S(45, 20),      S(15, 51),      S(21, 28),      S(7, 33),       S(10, 46),      S(15, 26),      S(21, 2)
};
constexpr Score ROOK_TABLE[] = {
		S(25, 56),      S(35, 53),      S(-6, 63),      S(5, 58),       S(41, 51),      S(14, 53),      S(28, 48),      S(53, 50),
		S(11, 59),      S(16, 59),      S(37, 54),      S(47, 55),      S(71, 36),      S(97, 28),      S(32, 49),      S(54, 41),
		S(-8, 55),      S(27, 48),      S(37, 48),      S(45, 44),      S(67, 30),      S(103, 27),     S(148, 10),     S(52, 27),
		S(-7, 51),      S(4, 48),       S(26, 50),      S(49, 39),      S(31, 46),      S(52, 44),      S(29, 38),      S(10, 46),
		S(-24, 49),     S(-20, 51),     S(-9, 49),      S(0, 46),       S(9, 42),       S(22, 29),      S(43, 28),      S(0, 31),
		S(-31, 31),     S(-17, 36),     S(-15, 29),     S(-9, 32),      S(-5, 32),      S(14, 21),      S(31, 18),      S(3, 12),
		S(-40, 29),     S(-11, 19),     S(-19, 33),     S(-9, 27),      S(3, 25),       S(15, 15),      S(21, 9),       S(-59, 31),
		S(-12, 33),     S(-10, 31),     S(-8, 32),      S(4, 22),       S(5, 21),       S(9, 23),       S(-6, 23),      S(2, 11)
};
constexpr Score QUEEN_TABLE[] = {
		S(-9, -19),     S(-31, 46),     S(-18, 46),     S(12, 11),      S(73, 19),      S(71, 9),       S(79, -5),      S(73, 4),
		S(-4, 15),      S(-38, 39),     S(-8, 56),      S(-2, 62),      S(-26, 88),     S(32, 65),      S(19, 57),      S(67, 13),
		S(0, 7),        S(0, 22),       S(12, 23),      S(-27, 96),     S(-3, 92),      S(98, 46),      S(102, 22),     S(20, 77),
		S(-5, 6),       S(-7, 42),      S(-14, 59),     S(-11, 75),     S(-1, 92),      S(29, 67),      S(35, 84),      S(15, 92),
		S(1, -8),       S(2, 39),       S(14, 21),      S(0, 70),       S(14, 46),      S(20, 63),      S(31, 53),      S(27, 17),
		S(-12, 1),      S(31, -51),     S(20, 3),       S(10, -4),      S(17, 12),      S(22, 13),      S(44, -9),      S(20, 25),
		S(-18, -11),    S(18, -56),     S(32, -60),     S(20, -17),     S(28, -32),     S(34, -55),     S(35, -69),     S(5, -36),
		S(11, -40),     S(-9, -33),     S(7, -35),      S(17, -4),      S(7, -36),      S(1, -59),      S(15, -63),     S(-17, -73)
};
constexpr Score KING_TABLE[] = {
		S(-112, -102),  S(199, -87),    S(194, -65),    S(116, -56),    S(-138, -0),    S(-91, 20),     S(112, -26),    S(-28, -39),
		S(187, -64),    S(115, 4),      S(99, 8),       S(113, -0),     S(70, 13),      S(85, 25),      S(7, 36),       S(-168, 19),
		S(35, 1),       S(109, 16),     S(119, 24),     S(50, 17),      S(102, 10),     S(140, 43),     S(175, 35),     S(-22, 11),
		S(-2, -10),     S(43, 24),      S(26, 36),      S(12, 43),      S(-26, 43),     S(24, 36),      S(6, 33),       S(-127, 17),
		S(-91, -12),    S(77, -15),     S(3, 26),       S(-40, 47),     S(-43, 45),     S(-30, 29),     S(-29, 13),     S(-97, -7),
		S(-30, -25),    S(-7, 2),       S(-25, 18),     S(-37, 34),     S(-31, 32),     S(-24, 17),     S(-11, 2),      S(-39, -20),
		S(-20, -31),    S(-35, -9),     S(-15, 8),      S(-75, 24),     S(-46, 20),     S(-40, 13),     S(-38, 1),      S(-32, -28),
		S(-48, -82),    S(-9, -50),     S(-53, -12),    S(-68, -8),     S(-80, -11),    S(-37, -18),    S(-21, -34),    S(-27, -81)
};
constexpr Score PASSED_PAWN_BONUS[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(106, 161),    S(75, 163),     S(49, 160),     S(74, 139),     S(35, 146),     S(62, 150),     S(-8, 183),     S(35, 179),
		S(73, 188),     S(54, 199),     S(49, 156),     S(17, 165),     S(15, 92),      S(-14, 157),    S(-14, 179),    S(6, 177),
		S(26, 111),     S(15, 101),     S(9, 85),       S(1, 85),       S(3, 68),       S(22, 67),      S(-9, 100),     S(4, 87),
		S(12, 58),      S(-4, 57),      S(-29, 52),     S(-20, 44),     S(-17, 46),     S(-50, 54),     S(-11, 64),     S(-0, 56),
		S(1, 23),       S(-21, 34),     S(-16, 23),     S(-41, 28),     S(-16, 13),     S(6, 7),        S(23, 25),      S(31, 17),
		S(-3, 19),      S(14, 18),      S(-3, 7),       S(-12, 23),     S(-36, 16),     S(5, 1),        S(23, 11),      S(-6, 28),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score BLOCKED_PASSED_PAWN_PENALTY[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(9, -149),     S(111, -197),   S(77, -183),    S(140, -229),   S(153, -209),   S(142, -274),   S(85, -304),    S(2, -244),
		S(-3, -115),    S(48, -159),    S(25, -129),    S(25, -124),    S(14, -105),    S(108, -150),   S(-8, -156),    S(-64, -148),
		S(38, -68),     S(8, -68),      S(14, -71),     S(2, -47),      S(-15, -43),    S(-14, -69),    S(9, -77),      S(18, -93),
		S(25, -23),     S(-5, -34),     S(-22, -28),    S(13, -36),     S(-5, -33),     S(43, -45),     S(-96, -35),    S(7, -33),
		S(-3, -3),      S(7, -10),      S(-54, 8),      S(19, -50),     S(-23, -8),     S(34, -16),     S(-49, 39),     S(-47, -7),
		S(13, -39),     S(-4, -10),     S(-24, 19),     S(-47, -30),    S(86, -161),    S(30, -25),     S(-69, 14),     S(38, -34),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};

// pretty ignore
template<Color color, PieceType piece_type>
constexpr Score read_psqt(Square square) {
	if (color == WHITE) square = ~square;
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
// pretty stop-ignore
