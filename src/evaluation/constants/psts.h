#pragma once

#include "../../board/types/piece.h"
#include "../types.h"

constexpr Score PAWN_TABLE[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(122, 154),    S(119, 150),    S(73, 148),     S(108, 121),    S(71, 129),     S(94, 142),     S(41, 169),     S(37, 178),
		S(1, 45),       S(8, 39),       S(35, 38),      S(56, 6),       S(68, 17),      S(85, 23),      S(36, 37),      S(17, 47),
		S(-5, 19),      S(-3, 9),       S(-0, 10),      S(22, -16),     S(20, -1),      S(41, 2),       S(2, 12),       S(-6, 22),
		S(-14, 9),      S(-19, 7),      S(-2, -6),      S(7, -11),      S(10, -3),      S(22, -8),      S(1, -3),       S(-7, -2),
		S(-20, 4),      S(-22, 8),      S(-7, 10),      S(-3, 7),       S(5, 24),       S(-8, 23),      S(-10, 8),      S(-26, 4),
		S(-11, 15),     S(-3, 16),      S(-8, 31),      S(1, 15),       S(4, 39),       S(12, 36),      S(14, 15),      S(-34, 3),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score KNIGHT_TABLE[] = {
		S(-217, -17),   S(-131, 13),    S(-93, 47),     S(-9, 14),      S(97, 6),       S(-155, 40),    S(-45, -21),    S(-140, -61),
		S(-25, 15),     S(-38, 35),     S(34, 23),      S(20, 55),      S(31, 38),      S(60, 8),       S(-15, 23),     S(2, 2),
		S(-39, 19),     S(25, 29),      S(46, 69),      S(80, 64),      S(87, 48),      S(117, 48),     S(58, 20),      S(59, -8),
		S(26, 25),      S(45, 45),      S(57, 68),      S(90, 71),      S(61, 74),      S(83, 72),      S(43, 52),      S(58, 30),
		S(12, 32),      S(29, 28),      S(49, 66),      S(69, 70),      S(78, 63),      S(62, 66),      S(86, 37),      S(29, 36),
		S(-5, -21),     S(17, 18),      S(36, 31),      S(48, 56),      S(59, 44),      S(48, 23),      S(44, 6),       S(13, 26),
		S(-23, -6),     S(-11, 19),     S(16, 4),       S(37, 32),      S(35, 43),      S(35, 3),       S(16, 17),      S(22, -7),
		S(-115, 20),    S(2, -2),       S(-13, 17),     S(6, 29),       S(22, 17),      S(16, 23),      S(4, 18),       S(-37, -20)
};
constexpr Score BISHOP_TABLE[] = {
		S(-42, 17),     S(-3, 28),      S(-104, 57),    S(-69, 62),     S(-61, 64),     S(-87, 45),     S(-10, 32),     S(31, 3),
		S(-20, 41),     S(7, 30),       S(7, 42),       S(-17, 37),     S(1, 42),       S(41, 33),      S(-14, 34),     S(-21, 32),
		S(23, 39),      S(36, 36),      S(65, 38),      S(31, 39),      S(56, 31),      S(65, 54),      S(69, 38),      S(31, 49),
		S(1, 53),       S(30, 42),      S(22, 50),      S(69, 30),      S(47, 32),      S(48, 40),      S(26, 49),      S(23, 62),
		S(12, 43),      S(21, 31),      S(34, 46),      S(45, 35),      S(54, 25),      S(23, 43),      S(25, 24),      S(38, 34),
		S(17, 25),      S(34, 28),      S(39, 40),      S(32, 41),      S(32, 50),      S(43, 34),      S(41, 18),      S(41, 17),
		S(38, 9),       S(43, 2),       S(44, 18),      S(30, 27),      S(35, 26),      S(33, 12),      S(61, 25),      S(39, -6),
		S(47, -12),     S(35, 17),      S(21, 59),      S(24, 45),      S(15, 38),      S(15, 48),      S(14, 30),      S(26, -13)
};
constexpr Score ROOK_TABLE[] = {
		S(35, 60),      S(32, 64),      S(-9, 67),      S(-3, 68),      S(47, 52),      S(46, 49),      S(34, 56),      S(101, 46),
		S(22, 62),      S(14, 67),      S(39, 58),      S(55, 55),      S(57, 48),      S(97, 27),      S(46, 49),      S(62, 45),
		S(-10, 58),     S(26, 49),      S(38, 45),      S(50, 40),      S(58, 34),      S(105, 32),     S(135, 16),     S(63, 27),
		S(-7, 54),      S(4, 49),       S(26, 52),      S(40, 41),      S(32, 46),      S(49, 39),      S(26, 40),      S(11, 47),
		S(-27, 51),     S(-20, 53),     S(-11, 48),     S(2, 47),       S(1, 44),       S(15, 33),      S(24, 32),      S(5, 29),
		S(-33, 29),     S(-15, 33),     S(-13, 31),     S(-8, 30),      S(-2, 30),      S(17, 17),      S(31, 21),      S(1, 12),
		S(-42, 32),     S(-9, 24),      S(-20, 32),     S(-8, 27),      S(-2, 26),      S(12, 15),      S(12, 13),      S(-66, 33),
		S(-14, 38),     S(-13, 35),     S(-8, 31),      S(3, 19),       S(2, 19),       S(7, 25),       S(-3, 25),      S(-0, 13)
};
constexpr Score QUEEN_TABLE[] = {
		S(-21, 18),     S(-36, 86),     S(1, 42),       S(35, 17),      S(78, 30),      S(89, 26),      S(88, 41),      S(52, 45),
		S(-6, 51),      S(-41, 81),     S(-13, 55),     S(-21, 67),     S(-23, 84),     S(55, 58),      S(18, 94),      S(48, 76),
		S(-7, 14),      S(-4, 20),      S(18, 3),       S(-7, 50),      S(1, 59),       S(92, 24),      S(108, 15),     S(15, 86),
		S(-6, 21),      S(-3, 32),      S(-13, 29),     S(-5, 13),      S(9, 28),       S(29, 44),      S(40, 67),      S(20, 100),
		S(-2, 20),      S(6, 29),       S(9, 2),        S(6, 12),       S(17, -3),      S(28, 22),      S(43, 20),      S(26, 32),
		S(-9, -10),     S(27, -58),     S(19, -13),     S(12, -22),     S(19, -18),     S(24, -6),      S(46, -28),     S(18, -1),
		S(-14, 0),      S(16, -31),     S(29, -74),     S(18, -20),     S(22, -27),     S(38, -83),     S(30, -57),     S(-11, -4),
		S(10, -25),     S(-16, -5),     S(-1, -19),     S(5, 51),       S(-2, -9),      S(-8, -43),     S(17, -37),     S(-13, -53)
};
constexpr Score KING_TABLE[] = {
		S(-82, -110),   S(211, -87),    S(188, -63),    S(103, -56),    S(-187, 0),     S(-98, 22),     S(69, -19),     S(-26, -43),
		S(167, -64),    S(138, 6),      S(103, 10),     S(121, -0),     S(76, 12),      S(78, 27),      S(-2, 40),      S(-157, 16),
		S(41, 8),       S(110, 23),     S(117, 26),     S(28, 26),      S(100, 15),     S(128, 43),     S(179, 31),     S(-44, 12),
		S(-27, 1),      S(14, 34),      S(39, 38),      S(27, 46),      S(-13, 46),     S(37, 36),      S(24, 31),      S(-106, 12),
		S(-74, -17),    S(84, -13),     S(18, 27),      S(-32, 49),     S(-9, 45),      S(-16, 28),     S(-9, 11),      S(-81, -10),
		S(-55, -20),    S(-12, 1),      S(-21, 19),     S(-25, 35),     S(-13, 32),     S(-14, 16),     S(-11, 1),      S(-34, -22),
		S(-30, -23),    S(-44, -2),     S(-15, 8),      S(-76, 25),     S(-40, 19),     S(-41, 14),     S(-41, 2),      S(-29, -30),
		S(-58, -85),    S(-11, -49),    S(-58, -10),    S(-70, -10),    S(-81, -15),    S(-45, -19),    S(-20, -36),    S(-26, -88)
};
constexpr Score PASSED_PAWN_BONUS[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(122, 154),    S(119, 150),    S(73, 148),     S(108, 121),    S(71, 129),     S(94, 142),     S(41, 169),     S(37, 178),
		S(78, 193),     S(52, 193),     S(52, 157),     S(23, 157),     S(11, 135),     S(14, 151),     S(-23, 180),    S(19, 178),
		S(34, 112),     S(34, 104),     S(27, 89),      S(12, 88),      S(17, 72),      S(16, 79),      S(-9, 108),     S(8, 91),
		S(18, 62),      S(-6, 65),      S(-13, 63),     S(-2, 58),      S(-8, 55),      S(-37, 61),     S(-8, 73),      S(-4, 62),
		S(7, 23),       S(-12, 34),     S(-6, 22),      S(-24, 27),     S(-4, 15),      S(10, 9),       S(24, 29),      S(28, 21),
		S(-4, 17),      S(6, 18),       S(3, 3),        S(6, 10),       S(-4, 9),       S(6, -4),       S(23, 9),       S(-5, 26),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score BLOCKED_PASSED_PAWN_PENALTY[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(-8, -133),    S(68, -190),    S(69, -174),    S(81, -205),    S(89, -182),    S(115, -268),   S(4, -268),     S(-11, -239),
		S(2, -110),     S(40, -142),    S(20, -138),    S(22, -119),    S(13, -102),    S(67, -141),    S(35, -171),    S(-64, -151),
		S(27, -69),     S(7, -74),      S(12, -67),     S(6, -56),      S(-6, -46),     S(-6, -66),     S(24, -74),     S(14, -95),
		S(17, -18),     S(16, -39),     S(-16, -33),    S(2, -30),      S(-22, -28),    S(25, -49),     S(-95, -37),    S(9, -34),
		S(4, -6),       S(8, -0),       S(-32, -9),     S(-0, -37),     S(-35, -14),    S(-35, -2),     S(-34, 26),     S(-83, -0),
		S(6, -19),      S(-4, -30),     S(-14, -6),     S(11, -62),     S(31, -116),    S(44, -24),     S(-106, 8),     S(15, -24),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};

// pretty ignore
template<Color color, PieceType piece_type>
constexpr Score read_psqt(Square square) {
	if constexpr (color == WHITE) square = flip(square);
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
// pretty stop-ignore
