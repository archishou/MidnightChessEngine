#pragma once
#include "move_generation/types.h"
#include "evaluation/types.h"
constexpr Score PAWN_TABLE[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(112, 155),    S(82, 160),     S(59, 153),     S(85, 130),     S(50, 138),     S(83, 145),     S(7, 177),      S(31, 176),
		S(-2, 42),      S(4, 32),       S(32, 34),      S(55, -6),      S(42, 41),      S(82, 21),      S(32, 34),      S(12, 47),
		S(-4, 22),      S(1, 14),       S(10, 16),      S(30, -11),     S(26, 7),       S(42, 11),      S(2, 18),       S(-7, 25),
		S(-13, 14),     S(-11, 14),     S(10, 4),       S(23, 3),       S(22, 9),       S(26, 0),       S(3, 6),        S(-8, 5),
		S(-16, 4),      S(-16, 7),      S(2, 10),       S(9, 7),        S(15, 24),      S(-2, 21),      S(-7, 6),       S(-24, 5),
		S(-13, 13),     S(-11, 9),      S(-9, 26),      S(1, 8),        S(1, 35),       S(6, 31),       S(4, 9),        S(-37, 2),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score KNIGHT_TABLE[] = {
		S(-214, -13),   S(-129, 12),    S(-90, 46),     S(-10, 15),     S(92, 7),       S(-150, 39),    S(-47, -21),    S(-134, -61),
		S(-25, 15),     S(-37, 33),     S(35, 22),      S(19, 53),      S(29, 37),      S(57, 8),       S(-14, 23),     S(-1, 3),
		S(-38, 18),     S(23, 29),      S(45, 68),      S(78, 63),      S(84, 47),      S(113, 48),     S(56, 19),      S(56, -9),
		S(27, 24),      S(45, 44),      S(55, 66),      S(88, 70),      S(59, 73),      S(81, 72),      S(42, 51),      S(56, 30),
		S(11, 31),      S(29, 27),      S(48, 64),      S(67, 68),      S(77, 61),      S(60, 64),      S(84, 36),      S(28, 35),
		S(-6, -21),     S(16, 17),      S(34, 30),      S(46, 54),      S(58, 43),      S(46, 22),      S(42, 4),       S(11, 25),
		S(-23, -7),     S(-11, 18),     S(15, 4),       S(36, 31),      S(34, 41),      S(35, 2),       S(15, 17),      S(21, -9),
		S(-114, 18),    S(2, -3),       S(-13, 16),     S(6, 28),       S(21, 16),      S(15, 22),      S(3, 17),       S(-35, -22)
};
constexpr Score BISHOP_TABLE[] = {
		S(-41, 15),     S(-2, 25),      S(-100, 54),    S(-71, 60),     S(-62, 63),     S(-85, 43),     S(-11, 29),     S(32, 1),
		S(-24, 41),     S(6, 28),       S(5, 41),       S(-18, 36),     S(0, 40),       S(39, 32),      S(-14, 32),     S(-23, 30),
		S(22, 39),      S(34, 35),      S(64, 35),      S(31, 37),      S(55, 29),      S(65, 52),      S(67, 37),      S(29, 47),
		S(1, 50),       S(29, 41),      S(21, 48),      S(68, 29),      S(46, 31),      S(46, 38),      S(24, 47),      S(20, 60),
		S(10, 42),      S(21, 29),      S(32, 44),      S(44, 33),      S(53, 23),      S(22, 41),      S(23, 22),      S(35, 31),
		S(16, 23),      S(33, 26),      S(37, 38),      S(31, 39),      S(31, 48),      S(41, 32),      S(40, 16),      S(38, 17),
		S(36, 7),       S(40, 1),       S(43, 17),      S(28, 26),      S(33, 25),      S(32, 10),      S(58, 24),      S(36, -7),
		S(44, -13),     S(34, 16),      S(19, 58),      S(22, 43),      S(13, 37),      S(12, 46),      S(13, 29),      S(23, -15)
};
constexpr Score ROOK_TABLE[] = {
		S(32, 60),      S(32, 62),      S(-10, 66),     S(-4, 67),      S(45, 51),      S(47, 47),      S(33, 55),      S(96, 46),
		S(20, 62),      S(12, 67),      S(37, 57),      S(52, 55),      S(54, 48),      S(91, 28),      S(46, 48),      S(61, 43),
		S(-7, 57),      S(28, 47),      S(39, 43),      S(49, 39),      S(61, 31),      S(109, 29),     S(140, 13),     S(67, 24),
		S(-5, 52),      S(6, 47),       S(27, 50),      S(42, 39),      S(34, 43),      S(53, 37),      S(30, 38),      S(14, 44),
		S(-26, 50),     S(-17, 52),     S(-10, 47),     S(3, 44),       S(4, 42),       S(15, 32),      S(27, 31),      S(5, 28),
		S(-33, 29),     S(-14, 31),     S(-12, 29),     S(-7, 28),      S(-1, 29),      S(16, 16),      S(31, 20),      S(1, 11),
		S(-42, 31),     S(-10, 24),     S(-21, 32),     S(-8, 26),      S(-3, 25),      S(10, 15),      S(12, 13),      S(-65, 33),
		S(-15, 37),     S(-14, 34),     S(-10, 30),     S(2, 18),       S(0, 18),       S(5, 25),       S(-3, 25),      S(-2, 13)
};
constexpr Score QUEEN_TABLE[] = {
		S(-18, 15),     S(-35, 86),     S(1, 42),       S(34, 17),      S(74, 32),      S(84, 28),      S(86, 43),      S(55, 43),
		S(-8, 53),      S(-43, 83),     S(-15, 58),     S(-20, 66),     S(-23, 84),     S(54, 58),      S(17, 95),      S(47, 77),
		S(-7, 14),      S(-4, 19),      S(17, 2),       S(-7, 49),      S(1, 58),       S(92, 21),      S(107, 13),     S(16, 85),
		S(-6, 21),      S(-4, 33),      S(-14, 29),     S(-4, 12),      S(8, 27),       S(28, 43),      S(38, 67),      S(18, 102),
		S(-2, 20),      S(7, 27),       S(10, 1),       S(5, 11),       S(17, -4),      S(27, 21),      S(42, 19),      S(26, 31),
		S(-8, -8),      S(27, -56),     S(19, -13),     S(11, -22),     S(19, -18),     S(24, -7),      S(47, -29),     S(18, -0),
		S(-13, 1),      S(15, -29),     S(28, -73),     S(18, -20),     S(22, -27),     S(37, -82),     S(29, -54),     S(-11, -5),
		S(8, -22),      S(-17, -4),     S(-1, -19),     S(5, 49),       S(-2, -8),      S(-7, -42),     S(16, -36),     S(-14, -50)
};
constexpr Score KING_TABLE[] = {
		S(-77, -109),   S(202, -82),    S(184, -63),    S(99, -55),     S(-188, 2),     S(-92, 20),     S(67, -18),     S(-27, -41),
		S(167, -62),    S(138, 6),      S(105, 10),     S(116, 1),      S(78, 11),      S(81, 25),      S(2, 39),       S(-150, 14),
		S(45, 6),       S(109, 23),     S(114, 26),     S(29, 26),      S(93, 15),      S(126, 43),     S(175, 31),     S(-38, 11),
		S(-22, -0),     S(13, 33),      S(37, 38),      S(28, 45),      S(-15, 46),     S(34, 37),      S(22, 32),      S(-104, 12),
		S(-75, -16),    S(84, -13),     S(18, 27),      S(-31, 49),     S(-8, 44),      S(-14, 28),     S(-7, 11),      S(-80, -9),
		S(-53, -20),    S(-14, 2),      S(-18, 19),     S(-25, 34),     S(-12, 31),     S(-12, 16),     S(-6, -0),      S(-33, -23),
		S(-33, -23),    S(-47, -2),     S(-14, 7),      S(-75, 23),     S(-39, 18),     S(-40, 13),     S(-44, 1),      S(-30, -30),
		S(-58, -85),    S(-14, -48),    S(-59, -11),    S(-69, -11),    S(-81, -16),    S(-43, -19),    S(-22, -36),    S(-28, -86)
};
constexpr Score PASSED_PAWN_BONUS[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(112, 155),    S(82, 160),     S(59, 153),     S(85, 130),     S(50, 138),     S(83, 145),     S(7, 177),      S(31, 176),
		S(70, 193),     S(39, 200),     S(45, 160),     S(16, 169),     S(28, 108),     S(-0, 153),     S(-13, 177),    S(17, 173),
		S(28, 109),     S(19, 101),     S(11, 86),      S(3, 85),       S(3, 70),       S(17, 71),      S(-11, 101),    S(7, 88),
		S(13, 58),      S(-11, 58),     S(-23, 53),     S(-17, 46),     S(-17, 44),     S(-37, 53),     S(-14, 65),     S(-3, 56),
		S(3, 22),       S(-16, 34),     S(-14, 21),     S(-36, 27),     S(-14, 15),     S(-4, 11),      S(20, 30),      S(24, 19),
		S(-5, 20),      S(7, 23),       S(-2, 8),       S(-2, 17),      S(-9, 13),      S(5, 0),        S(22, 14),      S(-5, 26),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score BLOCKED_PASSED_PAWN_PENALTY[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(-13, -132),   S(72, -183),    S(65, -169),    S(101, -215),   S(101, -187),   S(115, -270),   S(33, -272),    S(-10, -234),
		S(12, -112),    S(44, -142),    S(13, -132),    S(21, -118),    S(22, -102),    S(76, -143),    S(6, -164),     S(-55, -148),
		S(27, -70),     S(5, -74),      S(9, -67),      S(1, -55),      S(-4, -51),     S(-20, -66),    S(38, -81),     S(7, -93),
		S(16, -20),     S(15, -39),     S(-19, -32),    S(2, -31),      S(-23, -30),    S(20, -50),     S(-97, -36),    S(4, -32),
		S(3, -5),       S(2, 1),        S(-38, -8),     S(6, -40),      S(-33, -15),    S(-28, -3),     S(-39, 24),     S(-73, -1),
		S(9, -20),      S(-4, -26),     S(-6, -6),      S(10, -58),     S(22, -106),    S(43, -22),     S(-94, 10),     S(15, -25),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};

// pretty ignore
template<Color color, PieceType piece_type>
constexpr Score read_psqt(Square square) {
	if (color == WHITE) square = ~square;
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
// pretty stop-ignore
