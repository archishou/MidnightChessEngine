#pragma once
#include "move_generation/types.h"
#include "evaluation/types.h"
constexpr Score PAWN_TABLE[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(108, 161),    S(78, 163),     S(51, 160),     S(75, 139),     S(39, 146),     S(64, 150),     S(-2, 182),     S(33, 180),
		S(-11, 50),     S(-6, 37),      S(21, 37),      S(53, -1),      S(67, 53),      S(96, 13),      S(30, 32),      S(21, 43),
		S(-7, 21),      S(-0, 14),      S(8, 15),       S(34, -12),     S(26, 6),       S(41, 12),      S(5, 17),       S(-4, 23),
		S(-12, 14),     S(-11, 14),     S(10, 2),       S(26, -1),      S(23, 5),       S(26, -1),      S(3, 5),        S(-9, 4),
		S(-14, 2),      S(-17, 7),      S(2, 6),        S(8, 8),        S(12, 21),      S(-4, 20),      S(-8, 5),       S(-25, 4),
		S(-13, 12),     S(-8, 8),       S(-9, 26),      S(2, 15),       S(0, 36),       S(9, 30),       S(6, 8),        S(-34, 2),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score KNIGHT_TABLE[] = {
		S(-200, -17),   S(-149, 16),    S(-74, 40),     S(-11, 13),     S(83, 9),       S(-138, 28),    S(-51, -21),    S(-122, -71),
		S(-32, 15),     S(-39, 33),     S(36, 24),      S(13, 52),      S(12, 43),      S(53, 11),      S(-22, 26),     S(-19, 1),
		S(-26, 13),     S(34, 26),      S(44, 66),      S(74, 63),      S(80, 45),      S(121, 40),     S(57, 19),      S(55, -12),
		S(32, 24),      S(46, 42),      S(51, 69),      S(84, 70),      S(55, 77),      S(78, 71),      S(43, 48),      S(57, 24),
		S(16, 29),      S(26, 32),      S(50, 61),      S(62, 67),      S(70, 63),      S(58, 61),      S(83, 34),      S(28, 36),
		S(-2, -5),      S(16, 23),      S(36, 27),      S(43, 55),      S(59, 39),      S(49, 17),      S(44, 0),       S(12, 20),
		S(-19, -12),    S(0, 8),        S(20, 13),      S(38, 30),      S(39, 36),      S(38, 5),       S(19, 25),      S(33, -18),
		S(-90, 0),      S(10, -10),     S(-9, 13),      S(9, 29),       S(33, 9),       S(22, 17),      S(10, 4),       S(-21, -37)
};
constexpr Score BISHOP_TABLE[] = {
		S(-28, 27),     S(13, 27),      S(-102, 49),    S(-69, 43),     S(-57, 49),     S(-92, 39),     S(0, 26),       S(22, 17),
		S(-21, 42),     S(13, 32),      S(9, 41),       S(-28, 40),     S(9, 40),       S(49, 28),      S(-11, 38),     S(-28, 37),
		S(24, 29),      S(36, 31),      S(53, 29),      S(29, 33),      S(52, 26),      S(64, 40),      S(77, 33),      S(33, 38),
		S(-2, 36),      S(27, 38),      S(18, 46),      S(78, 38),      S(51, 39),      S(55, 35),      S(27, 51),      S(21, 45),
		S(7, 30),       S(19, 34),      S(35, 43),      S(56, 45),      S(65, 35),      S(26, 39),      S(24, 25),      S(40, 18),
		S(22, 19),      S(40, 33),      S(36, 36),      S(36, 37),      S(36, 48),      S(44, 32),      S(38, 21),      S(42, 14),
		S(41, 12),      S(45, 8),       S(43, 19),      S(29, 32),      S(36, 30),      S(36, 11),      S(65, 28),      S(30, 1),
		S(46, 3),       S(49, 20),      S(21, 51),      S(27, 28),      S(11, 33),      S(14, 47),      S(20, 27),      S(24, 3)
};
constexpr Score ROOK_TABLE[] = {
		S(25, 56),      S(35, 53),      S(-4, 63),      S(8, 57),       S(41, 51),      S(18, 51),      S(29, 47),      S(52, 50),
		S(10, 59),      S(17, 59),      S(39, 53),      S(48, 55),      S(71, 37),      S(97, 28),      S(33, 49),      S(53, 41),
		S(-7, 55),      S(28, 48),      S(38, 48),      S(47, 45),      S(68, 30),      S(102, 28),     S(148, 10),     S(54, 26),
		S(-6, 51),      S(3, 49),       S(27, 51),      S(51, 40),      S(34, 46),      S(53, 45),      S(29, 38),      S(12, 45),
		S(-23, 49),     S(-19, 51),     S(-9, 50),      S(3, 46),       S(11, 42),      S(24, 29),      S(46, 27),      S(1, 31),
		S(-30, 31),     S(-18, 37),     S(-12, 29),     S(-8, 32),      S(-3, 32),      S(15, 21),      S(31, 18),      S(2, 12),
		S(-42, 29),     S(-12, 20),     S(-19, 34),     S(-8, 27),      S(4, 25),       S(14, 15),      S(20, 9),       S(-60, 31),
		S(-14, 33),     S(-11, 31),     S(-8, 32),      S(4, 21),       S(4, 20),       S(7, 23),       S(-7, 22),      S(-0, 11)
};
constexpr Score QUEEN_TABLE[] = {
		S(-4, -23),     S(-20, 38),     S(-1, 34),      S(29, -1),      S(85, 12),      S(80, 4),       S(97, -16),     S(73, 4),
		S(-4, 15),      S(-37, 39),     S(-8, 56),      S(2, 59),       S(-23, 87),     S(34, 65),      S(21, 56),      S(68, 11),
		S(2, 5),        S(-0, 23),      S(14, 22),      S(-24, 93),     S(2, 90),       S(104, 43),     S(102, 23),     S(21, 75),
		S(-5, 4),       S(-7, 43),      S(-12, 57),     S(-9, 74),      S(3, 90),       S(30, 66),      S(35, 85),      S(15, 92),
		S(0, -9),       S(3, 38),       S(12, 25),      S(0, 72),       S(15, 47),      S(19, 65),      S(34, 47),      S(25, 19),
		S(-14, -1),     S(28, -49),     S(20, 2),       S(8, -2),       S(16, 13),      S(21, 15),      S(43, -9),      S(19, 25),
		S(-23, -8),     S(14, -55),     S(28, -57),     S(16, -14),     S(25, -30),     S(30, -53),     S(32, -66),     S(-1, -32),
		S(6, -38),      S(-14, -31),    S(1, -32),      S(11, 2),       S(2, -33),      S(-4, -57),     S(12, -65),     S(-23, -68)
};
constexpr Score KING_TABLE[] = {
		S(-113, -101),  S(201, -88),    S(197, -66),    S(114, -56),    S(-146, 1),     S(-90, 20),     S(114, -26),    S(-32, -39),
		S(188, -65),    S(116, 4),      S(99, 8),       S(115, -0),     S(73, 12),      S(84, 26),      S(9, 36),       S(-171, 18),
		S(35, 2),       S(106, 17),     S(120, 24),     S(49, 18),      S(102, 10),     S(141, 43),     S(178, 35),     S(-21, 11),
		S(-4, -9),      S(42, 25),      S(25, 37),      S(12, 44),      S(-25, 43),     S(24, 36),      S(6, 34),       S(-128, 17),
		S(-90, -12),    S(77, -15),     S(6, 26),       S(-37, 47),     S(-39, 45),     S(-28, 29),     S(-27, 13),     S(-97, -7),
		S(-36, -24),    S(-7, 2),       S(-21, 18),     S(-35, 34),     S(-28, 32),     S(-21, 16),     S(-10, 2),      S(-38, -21),
		S(-22, -30),    S(-36, -8),     S(-15, 8),      S(-76, 24),     S(-45, 20),     S(-39, 13),     S(-38, 1),      S(-32, -28),
		S(-48, -82),    S(-9, -51),     S(-54, -11),    S(-69, -8),     S(-81, -11),    S(-37, -18),    S(-21, -34),    S(-28, -81)
};
constexpr Score PASSED_PAWN_BONUS[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(108, 161),    S(78, 163),     S(51, 160),     S(75, 139),     S(39, 146),     S(64, 150),     S(-2, 182),     S(33, 180),
		S(75, 188),     S(57, 198),     S(51, 156),     S(18, 165),     S(10, 95),      S(-17, 159),    S(-13, 179),    S(7, 178),
		S(26, 111),     S(15, 101),     S(10, 86),      S(1, 84),       S(4, 68),       S(23, 67),      S(-9, 100),     S(3, 88),
		S(12, 58),      S(-5, 57),      S(-30, 52),     S(-21, 45),     S(-17, 45),     S(-52, 54),     S(-12, 64),     S(-2, 57),
		S(1, 23),       S(-20, 35),     S(-16, 23),     S(-41, 27),     S(-16, 13),     S(7, 6),        S(22, 25),      S(30, 18),
		S(-2, 18),      S(14, 18),      S(-2, 6),       S(-11, 21),     S(-37, 16),     S(5, 1),        S(22, 11),      S(-5, 28),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score BLOCKED_PASSED_PAWN_PENALTY[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(5, -150),     S(108, -199),   S(75, -184),    S(138, -231),   S(150, -211),   S(144, -276),   S(76, -306),    S(6, -245),
		S(-6, -114),    S(48, -159),    S(25, -130),    S(24, -124),    S(13, -105),    S(107, -150),   S(-10, -155),   S(-67, -147),
		S(41, -70),     S(10, -69),     S(13, -70),     S(2, -47),      S(-15, -43),    S(-17, -68),    S(13, -79),     S(15, -93),
		S(25, -24),     S(-5, -35),     S(-22, -28),    S(14, -35),     S(-2, -35),     S(48, -47),     S(-99, -35),    S(6, -33),
		S(-4, -3),      S(4, -9),       S(-50, 8),      S(17, -47),     S(-22, -9),     S(32, -14),     S(-53, 39),     S(-42, -8),
		S(16, -40),     S(-4, -10),     S(-28, 19),     S(-32, -43),    S(94, -166),    S(25, -26),     S(-58, 9),      S(42, -36),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};

// pretty ignore
template<Color color, PieceType piece_type>
constexpr Score read_psqt(Square square) {
	if (color == WHITE) square = ~square;
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
// pretty stop-ignore
