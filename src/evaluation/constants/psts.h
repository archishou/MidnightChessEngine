#pragma once

#include "../../board/types/piece.h"
#include "../types.h"

constexpr Score PAWN_TABLE[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(124, 156),    S(120, 152),    S(76, 150),     S(112, 123),    S(72, 132),     S(97, 143),     S(42, 171),     S(38, 181),
		S(1, 46),       S(8, 40),       S(35, 39),      S(57, 5),       S(72, 18),      S(87, 22),      S(40, 36),      S(17, 49),
		S(-4, 19),      S(-2, 8),       S(-0, 10),      S(23, -18),     S(22, -3),      S(43, 1),       S(4, 11),       S(-6, 22),
		S(-14, 9),      S(-18, 7),      S(-2, -6),      S(8, -11),      S(12, -5),      S(23, -10),     S(3, -4),       S(-7, -2),
		S(-20, 4),      S(-21, 9),      S(-8, 11),      S(-3, 6),       S(4, 22),       S(-8, 21),      S(-9, 7),       S(-26, 4),
		S(-11, 17),     S(-3, 17),      S(-8, 32),      S(-3, 15),      S(2, 40),       S(7, 38),       S(12, 16),      S(-31, 6),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score KNIGHT_TABLE[] = {
		S(-218, -16),   S(-131, 15),    S(-93, 50),     S(-11, 18),     S(99, 9),       S(-155, 43),    S(-44, -20),    S(-141, -59),
		S(-23, 16),     S(-37, 36),     S(36, 24),      S(22, 58),      S(31, 41),      S(62, 9),       S(-15, 25),     S(4, 3),
		S(-38, 20),     S(26, 31),      S(48, 70),      S(83, 66),      S(89, 50),      S(118, 51),     S(63, 20),      S(59, -5),
		S(27, 27),      S(46, 47),      S(59, 69),      S(91, 72),      S(63, 75),      S(85, 73),      S(45, 53),      S(59, 33),
		S(13, 34),      S(29, 30),      S(50, 68),      S(70, 70),      S(78, 63),      S(63, 65),      S(87, 38),      S(30, 38),
		S(-4, -21),     S(18, 19),      S(36, 32),      S(49, 56),      S(59, 43),      S(49, 21),      S(44, 4),       S(14, 27),
		S(-22, -5),     S(-10, 20),     S(16, 4),       S(36, 33),      S(34, 43),      S(29, 3),       S(11, 18),      S(24, -7),
		S(-114, 20),    S(5, -2),       S(-12, 18),     S(8, 30),       S(24, 18),      S(17, 24),      S(5, 21),       S(-37, -19)
};
constexpr Score BISHOP_TABLE[] = {
		S(-41, 19),     S(-2, 30),      S(-107, 60),    S(-72, 65),     S(-61, 67),     S(-89, 48),     S(-7, 34),      S(36, 6),
		S(-18, 44),     S(8, 31),       S(8, 44),       S(-16, 39),     S(1, 45),       S(44, 35),      S(-11, 35),     S(-23, 36),
		S(24, 42),      S(37, 38),      S(67, 38),      S(33, 39),      S(60, 31),      S(68, 55),      S(71, 40),      S(33, 51),
		S(2, 55),       S(32, 42),      S(24, 51),      S(73, 29),      S(48, 32),      S(50, 39),      S(27, 50),      S(24, 65),
		S(13, 45),      S(22, 32),      S(35, 46),      S(46, 34),      S(55, 23),      S(24, 42),      S(25, 24),      S(38, 35),
		S(18, 27),      S(35, 29),      S(40, 40),      S(33, 40),      S(31, 49),      S(43, 32),      S(41, 17),      S(42, 18),
		S(38, 12),      S(44, 3),       S(45, 19),      S(29, 28),      S(34, 27),      S(26, 12),      S(58, 24),      S(39, -3),
		S(48, -10),     S(36, 20),      S(24, 61),      S(25, 47),      S(16, 40),      S(17, 51),      S(13, 32),      S(26, -10)
};
constexpr Score ROOK_TABLE[] = {
		S(35, 62),      S(34, 65),      S(-8, 69),      S(-1, 70),      S(49, 54),      S(45, 52),      S(29, 60),      S(101, 48),
		S(22, 64),      S(15, 69),      S(41, 59),      S(57, 57),      S(60, 50),      S(100, 28),     S(47, 51),      S(61, 48),
		S(-10, 61),     S(27, 51),      S(40, 45),      S(52, 40),      S(58, 34),      S(107, 32),     S(137, 17),     S(64, 29),
		S(-7, 56),      S(5, 50),       S(27, 52),      S(41, 40),      S(33, 44),      S(52, 37),      S(27, 41),      S(12, 49),
		S(-27, 53),     S(-20, 54),     S(-10, 47),     S(3, 45),       S(1, 41),       S(18, 30),      S(25, 31),      S(6, 30),
		S(-33, 31),     S(-15, 33),     S(-13, 30),     S(-7, 28),      S(-2, 28),      S(18, 13),      S(30, 20),      S(0, 12),
		S(-41, 33),     S(-9, 24),      S(-20, 32),     S(-9, 27),      S(-3, 25),      S(4, 15),       S(7, 14),       S(-66, 34),
		S(-14, 38),     S(-13, 36),     S(-8, 31),      S(3, 20),       S(2, 20),       S(7, 27),       S(-2, 26),      S(0, 14)
};
constexpr Score QUEEN_TABLE[] = {
		S(-21, 19),     S(-36, 88),     S(2, 44),       S(36, 19),      S(78, 34),      S(88, 29),      S(88, 43),      S(55, 44),
		S(-6, 52),      S(-41, 82),     S(-12, 57),     S(-20, 70),     S(-23, 89),     S(60, 59),      S(23, 92),      S(50, 76),
		S(-8, 15),      S(-4, 21),      S(19, 3),       S(-6, 52),      S(4, 61),       S(93, 28),      S(111, 17),     S(17, 89),
		S(-6, 21),      S(-2, 32),      S(-13, 30),     S(-4, 14),      S(10, 31),      S(30, 48),      S(41, 68),      S(21, 101),
		S(-1, 19),      S(7, 30),       S(10, 4),       S(6, 14),       S(16, -1),      S(29, 22),      S(44, 20),      S(27, 33),
		S(-8, -10),     S(28, -58),     S(19, -12),     S(12, -22),     S(17, -17),     S(24, -8),      S(46, -31),     S(17, -0),
		S(-14, 0),      S(16, -32),     S(29, -76),     S(17, -20),     S(20, -27),     S(31, -87),     S(24, -60),     S(-12, -5),
		S(10, -27),     S(-16, -5),     S(-0, -19),     S(5, 51),       S(-2, -10),     S(-8, -43),     S(18, -39),     S(-14, -54)
};
constexpr Score KING_TABLE[] = {
		S(-82, -119),   S(214, -90),    S(203, -66),    S(117, -60),    S(-173, -4),    S(-97, 21),     S(69, -23),     S(-13, -53),
		S(160, -70),    S(154, 7),      S(134, 14),     S(152, 4),      S(110, 16),     S(109, 31),     S(13, 42),      S(-154, 9),
		S(42, 2),       S(128, 24),     S(160, 38),     S(69, 46),      S(146, 35),     S(169, 57),     S(198, 34),     S(-45, 7),
		S(-21, -4),     S(35, 36),      S(81, 51),      S(57, 78),      S(20, 78),      S(73, 50),      S(46, 34),      S(-107, 8),
		S(-73, -22),    S(100, -10),    S(48, 39),      S(-1, 67),      S(19, 65),      S(13, 40),      S(7, 14),       S(-86, -13),
		S(-66, -23),    S(-9, 3),       S(-7, 25),      S(-8, 40),      S(1, 38),       S(1, 22),       S(-9, 4),       S(-48, -26),
		S(-51, -25),    S(-56, -2),     S(-22, 8),      S(-81, 25),     S(-44, 19),     S(-50, 15),     S(-52, 2),      S(-50, -32),
		S(-87, -89),    S(-36, -55),    S(-78, -14),    S(-91, -18),    S(-99, -20),    S(-69, -25),    S(-43, -43),    S(-58, -89)
};
constexpr Score PASSED_PAWN_BONUS[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(124, 156),    S(120, 152),    S(76, 150),     S(112, 123),    S(72, 132),     S(97, 143),     S(42, 171),     S(38, 181),
		S(79, 194),     S(53, 195),     S(55, 157),     S(25, 158),     S(13, 134),     S(18, 152),     S(-21, 182),    S(20, 179),
		S(35, 114),     S(35, 105),     S(29, 88),      S(14, 88),      S(17, 72),      S(17, 79),      S(-6, 108),     S(9, 92),
		S(18, 62),      S(-5, 66),      S(-12, 62),     S(-1, 57),      S(-9, 54),      S(-38, 60),     S(-7, 74),      S(-4, 63),
		S(7, 24),       S(-12, 34),     S(-5, 21),      S(-23, 27),     S(-6, 15),      S(7, 9),        S(23, 29),      S(28, 21),
		S(-4, 17),      S(5, 19),       S(2, 4),        S(6, 10),       S(-4, 8),       S(2, -4),       S(20, 11),      S(-5, 26),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};
constexpr Score BLOCKED_PASSED_PAWN_PENALTY[] = {
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),
		S(-7, -136),    S(71, -194),    S(70, -177),    S(82, -209),    S(95, -188),    S(121, -272),   S(15, -274),    S(-9, -243),
		S(3, -112),     S(41, -144),    S(20, -139),    S(22, -120),    S(12, -102),    S(67, -143),    S(33, -173),    S(-62, -152),
		S(27, -71),     S(7, -75),      S(11, -66),     S(5, -56),      S(-6, -45),     S(-5, -65),     S(24, -74),     S(14, -97),
		S(17, -18),     S(17, -39),     S(-17, -32),    S(1, -28),      S(-26, -25),    S(27, -46),     S(-101, -35),   S(11, -34),
		S(4, -6),       S(9, -1),       S(-32, -10),    S(-1, -37),     S(-38, -12),    S(-38, -1),     S(-36, 28),     S(-81, -2),
		S(5, -19),      S(-4, -32),     S(-15, -7),     S(15, -67),     S(34, -122),    S(44, -25),     S(-104, 3),     S(15, -27),
		S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0),        S(0, 0)
};

// pretty ignore
template<Color color, PieceType piece_type>
constexpr Score read_psqt(Square square) {
	if constexpr (color == WHITE) square = flip(square);
	switch (piece_type) {
		case PAWN: return PAWN_TABLE[square];
		case KNIGHT: return KNIGHT_TABLE[square];
		case BISHOP: return BISHOP_TABLE[square];
		case ROOK: return ROOK_TABLE[square];
		case QUEEN: return QUEEN_TABLE[square];
		case KING: return KING_TABLE[square];
		default: return {};
	}
}
// pretty stop-ignore
